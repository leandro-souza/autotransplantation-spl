static int confirm (void);
int save_typebuf (void);
static regprog_T *bt_regcomp (char_u *expr, int re_flags);
static void init_class_tab (void);
static void regcomp_start (char_u * expr, int re_flags);
static void initchr (char_u * str);
static void bt_regfree (regprog_T * prog);
static int bt_regexec_nl (regmatch_T * rmp, char_u * line, colnr_T col, int line_lbr);
static long  bt_regexec_both (char_u * line, colnr_T col, proftime_T * tm, int * timed_out);
static long  regtry (bt_regprog_T * prog, colnr_T col, proftime_T * tm, int * timed_out);
static reg_extmatch_T *make_extmatch (void);
static long  bt_regexec_multi (regmmatch_T * rmp, win_T * win, buf_T * buf, linenr_T lnum, colnr_T col, proftime_T * tm, int * timed_out);
static regprog_T *nfa_regcomp (char_u *expr, int re_flags);
static int nfa_regcomp_start (char_u * expr, int re_flags);
static int *re2post (void);
static int nfa_reg (int paren);
static int nfa_regbranch (void);
static int nfa_regconcat (void);
static int nfa_regpiece (void);
static void save_parse_state (parse_state_T * ps);
static int nfa_regatom (void);
static int nfa_recognize_char_class (char_u * start, char_u * end, int extra_newl);
static int nfa_emit_equi_class (int c);
static void restore_parse_state (parse_state_T * ps);
static nfa_state_T *post2nfa (int *postfix, int *end, int nfa_calc_size);
static void patch (Ptrlist * l, nfa_state_T * s);
static Frag_T frag (nfa_state_T * start, Ptrlist * out);
static nfa_state_T *alloc_state (int c, nfa_state_T *out, nfa_state_T *out1);
static Ptrlist *list1 (nfa_state_T **outp);
static int nfa_max_width (nfa_state_T * startstate, int depth);
static void nfa_postprocess (nfa_regprog_T * prog);
static int match_follows (nfa_state_T * startstate, int depth);
static int failure_chance (nfa_state_T * state, int depth);
static int nfa_get_reganch (nfa_state_T * start, int depth);
static int nfa_get_regstart (nfa_state_T * start, int depth);
static char_u *nfa_get_match_text (nfa_state_T *start);
static void nfa_regfree (regprog_T * prog);
static int nfa_regexec_nl (regmatch_T * rmp, char_u * line, colnr_T col, int line_lbr);
static long  nfa_regexec_both (char_u * line, colnr_T startcol, proftime_T * tm, int * timed_out);
static int skip_to_start (int c, colnr_T * colp);
static long  find_match_text (colnr_T startcol, int regstart, char_u * match_text);
static long  nfa_regtry (nfa_regprog_T * prog, colnr_T col, proftime_T * tm, int * timed_out);
static void clear_sub (regsub_T * sub);
static int nfa_regmatch (nfa_regprog_T * prog, nfa_state_T * start, regsubs_T * submatch, regsubs_T * m);
static int nfa_did_time_out ();
static regsubs_T *addstate (nfa_list_T *l, nfa_state_T *state, regsubs_T *subs_arg, nfa_pim_T *pim, int off_arg);
static int has_state_with_pos (nfa_list_T * l, nfa_state_T * state, regsubs_T * subs, nfa_pim_T * pim);
static int sub_equal (regsub_T * sub1, regsub_T * sub2);
static int pim_equal (nfa_pim_T * one, nfa_pim_T * two);
static void copy_sub (regsub_T * to, regsub_T * from);
static void copy_pim (nfa_pim_T * to, nfa_pim_T * from);
static void copy_sub_off (regsub_T * to, regsub_T * from);
static int recursive_regmatch (nfa_state_T * state, nfa_pim_T * pim, nfa_regprog_T * prog, regsubs_T * submatch, regsubs_T * m, int * * listids);
static void nfa_save_listids (nfa_regprog_T * prog, int * list);
static void nfa_restore_listids (nfa_regprog_T * prog, int * list);
static void copy_ze_off (regsub_T * to, regsub_T * from);
static void addstate_here (nfa_list_T * l, nfa_state_T * state, regsubs_T * subs, nfa_pim_T * pim, int * ip);
static int state_in_list (nfa_list_T * l, nfa_state_T * state, regsubs_T * subs);
static int check_char_class (int class, int c);
static int match_backref (regsub_T * sub, int subidx, int * bytelen);
static int match_zref (int subidx, int * bytelen);
static int nfa_re_num_cmp (long_u val, int op, long_u pos);
static long  nfa_regexec_multi (regmmatch_T * rmp, win_T * win, buf_T * buf, linenr_T lnum, colnr_T col, proftime_T * tm, int * timed_out);
static void syn_cmd_conceal (exarg_T * eap, int syncing);
static void syn_cmd_case (exarg_T * eap, int syncing);
static void syn_cmd_spell (exarg_T * eap, int syncing);
static void syn_cmd_iskeyword (exarg_T * eap, int syncing);
static void syn_cmd_clear (exarg_T * eap, int syncing);
static void syntax_sync_clear (void);
static void syn_remove_pattern (synblock_T * block, int idx);
static int syn_scl_namen2id (char_u * linep, int len);
static int syn_scl_name2id (char_u * name);
static void syn_clear_one (int id, int syncing);
static void syn_clear_keyword (int id, hashtab_T * ht);
void hash_unlock (hashtab_T * ht);
static void syn_cmd_on (exarg_T * eap, int syncing);
static void syn_cmd_onoff (exarg_T * eap, char * name);
static void syn_cmd_enable (exarg_T * eap, int syncing);
static void syn_cmd_reset (exarg_T * eap, int syncing);
static void syn_cmd_manual (exarg_T * eap, int syncing);
static void syn_cmd_off (exarg_T * eap, int syncing);
static void syn_cmd_list (exarg_T * eap, int syncing);
static void syn_lines_msg (void);
static void syn_match_msg (void);
static void syn_list_one (int id, int syncing, int link_only);
static int syn_list_keywords (int id, hashtab_T * ht, int did_header, int attr);
static void put_id_list (char_u * name, short * list, int attr);
static void put_pattern (char * s, int c, synpat_T * spp, int attr);
static void syn_list_flags (struct name_list * nlist, int flags, int attr);
static void syn_list_cluster (int id);
static void syn_cmd_include (exarg_T * eap, int syncing);
static char_u *get_group_name (char_u *arg, char_u **name_end);
static int syn_check_cluster (char_u * pp, int len);
static int syn_add_cluster (char_u * name);
static void syn_cmd_keyword (exarg_T * eap, int syncing);
static char_u *get_syn_options (char_u *arg, syn_opt_arg_T *opt, int *conceal_char, int skip);
static int get_id_list (char_u * * arg, int keylen, short * * list, int skip);
static void syn_incl_toplevel (int id, int * flagsp);
static void syn_combine_list (short * * clstr1, short * * clstr2, int list_op);
static int syn_compare_stub (const void * v1, const void * v2);
static void add_keyword (char_u * name, int id, int flags, short * cont_in_list, short * next_list, int conceal_char);
static short  *copy_id_list (short  *list);
static void syn_cmd_match (exarg_T * eap, int syncing);
static void init_syn_patterns (void);
static char_u *get_syn_pattern (char_u *arg, synpat_T *ci);
static void syn_clear_time (syn_time_T * st);
int vim_regcomp_had_eol (void);
static void syn_cmd_region (exarg_T * eap, int syncing);
static void syn_cmd_cluster (exarg_T * eap, int syncing);
static void syn_cmd_sync (exarg_T * eap, int syncing);
static int handle_damage (VTermRect rect, void * user);
static int handle_moverect (VTermRect dest, VTermRect src, void * user);
static int handle_movecursor (VTermPos pos, VTermPos oldpos, int visible, void * user);
static void may_toggle_cursor (term_T * term);
static int handle_settermprop (VTermProp prop, VTermValue * value, void * user);
static int handle_resize (int rows, int cols, void * user);
static int handle_pushline (int cols, const VTermScreenCell * cells, void * user);
void f_term_getaltscreen (typval_T * argvars, typval_T * rettv);
static buf_T *term_get_buf (typval_T *argvars);
buf_T *get_buf_tv (typval_T *tv, int curtab_only);
buf_T *buflist_find_by_name (char_u *name, int curtab_only);
static buf_T *find_buffer (typval_T *avar);
buf_T *buflist_findname_exp (char_u *fname);
void f_term_getattr (typval_T * argvars, typval_T * rettv);
void f_term_getcursor (typval_T * argvars, typval_T * rettv);
int list_append_dict (list_T * list, dict_T * dict);
void f_term_getjob (typval_T * argvars, typval_T * rettv);
void f_term_getline (typval_T * argvars, typval_T * rettv);
static int get_row_number (typval_T * tv, term_T * term);
void f_term_getscrolled (typval_T * argvars, typval_T * rettv);
void f_term_getsize (typval_T * argvars, typval_T * rettv);
void f_term_getstatus (typval_T * argvars, typval_T * rettv);
void f_term_gettitle (typval_T * argvars, typval_T * rettv);
void f_term_gettty (typval_T * argvars, typval_T * rettv);
void f_term_list (typval_T * argvars, typval_T * rettv);
void f_term_scrape (typval_T * argvars, typval_T * rettv);
void f_term_sendkeys (typval_T * argvars, typval_T * rettv);
void f_term_start (typval_T * argvars, typval_T * rettv);
static void init_job_options (jobopt_T * opt);
void clear_job_options (jobopt_T * opt);
int get_job_options (typval_T * tv, jobopt_T * opt, int supported, int supported2);
static int handle_mode (typval_T * item, jobopt_T * opt, ch_mode_T * modep, int jo);
static int handle_io (typval_T * item, ch_part_T part, jobopt_T * opt);
static int part_from_char (int c);
char_u *get_callback (typval_T *arg, partial_T **pp);
static buf_T *term_start (typval_T *argvar, jobopt_T *opt, int forceit);
static void set_term_and_win_size (term_T * term);
static void setup_job_options (jobopt_T * opt, int rows, int cols);
static int create_pty_only (term_T * term, jobopt_T * opt);
static void create_vterm (term_T * term, int rows, int cols);
VTerm *vterm_new_with_allocator (int rows, int cols, VTermAllocatorFunctions *funcs, void *allocdata);
static void cterm_color2rgb (int nr, VTermColor * rgb);
void term_get_fg_color (char_u * r, char_u * g, char_u * b);
void term_get_bg_color (char_u * r, char_u * g, char_u * b);
static void set_col_tabstop (VTermState * state, int col);
static void clear_col_tabstop (VTermState * state, int col);
static void set_lineinfo (VTermState * state, int row, int force, int dwl, int dhl);
void vterm_state_resetpen (VTermState * state);
static void setpenattr_bool (VTermState * state, VTermAttr attr, int boolean);
static void setpenattr (VTermState * state, VTermAttr attr, VTermValueType type, VTermValue * val);
static void setpenattr_int (VTermState * state, VTermAttr attr, int number);
static void setpenattr_col (VTermState * state, VTermAttr attr, VTermColor color);
static int settermprop_bool (VTermState * state, VTermProp prop, int v);
int vterm_state_set_termprop (VTermState * state, VTermProp prop, VTermValue * val);
static void erase (VTermState * state, VTermRect rect, int selective);
static int settermprop_int (VTermState * state, VTermProp prop, int v);
job_T *job_alloc (void);
int mch_create_pty_channel (job_T * job, jobopt_T * options);
static void open_pty (int * pty_master_fd, int * pty_slave_fd, char_u * * namep);
int OpenPTY (char **ttyn);
static void initmaster (int f);
channel_T *add_channel (void);
void channel_set_pipes (channel_T * channel, sock_T in, sock_T out, sock_T err);
static void channel_gui_register_one (channel_T * channel, ch_part_T part);
void channel_set_job (channel_T * channel, job_T * job, jobopt_T * options);
void channel_set_options (channel_T * channel, jobopt_T * opt);
static void set_callback (char_u * * cbp, partial_T * * pp, char_u * callback, partial_T * partial);
static buf_T *find_buffer (char_u *name, int err, int msg);
static int term_and_job_init (term_T * term, typval_T * argvar, jobopt_T * opt);
job_T *job_start (typval_T *argvars, jobopt_T *opt_arg);
void job_set_options (job_T * job, jobopt_T * opt);
int mch_parse_cmd (char_u * cmd, int use_shcf, char * * * argv, int * argc);
void mch_job_start (char * * argv, job_T * job, jobopt_T * options);
void reset_signals (void);
static void catch_signals (RETSIGTYPE (* func_deadly) (), RETSIGTYPE (* func_other) ());
static void set_child_environment (long rows, long columns, char * term);
static void set_default_child_environment (void);
int SetupSlavePTY (int fd);
int mch_chdir (char * path);
void free_job_options (jobopt_T * opt);
void channel_set_nonblock (channel_T * channel, ch_part_T part);
void f_term_wait (typval_T * argvars, typval_T * rettv);
char *job_status (job_T *job);
char *mch_job_status (job_T *job);
int mch_check_messages (void);
static void f_abs (typval_T * argvars, typval_T * rettv);
static void f_acos (typval_T * argvars, typval_T * rettv);
static int get_float_arg (typval_T * argvars, float_T * f);
static void f_add (typval_T * argvars, typval_T * rettv);
static void f_and (typval_T * argvars, typval_T * rettv);
static void f_append (typval_T * argvars, typval_T * rettv);
static linenr_T get_tv_lnum (typval_T * argvars);
static void f_line (typval_T * argvars, typval_T * rettv);
pos_T *var2fpos (typval_T *varp, int dollar_lnum, int *fnum);
long  list_find_nr (list_T * l, long idx, int * errorp);
static void f_argc (typval_T * argvars, typval_T * rettv);
static void f_argidx (typval_T * argvars, typval_T * rettv);
static void f_arglistid (typval_T * argvars, typval_T * rettv);
win_T *find_tabwin (typval_T *wvp, typval_T *tvp);
win_T *find_win_by_nr (typval_T *vp, tabpage_T *tp);
static void f_argv (typval_T * argvars, typval_T * rettv);
static void f_assert_beeps (typval_T * argvars, typval_T * rettv);
void assert_beeps (typval_T * argvars);
void prepare_assert_error (garray_T * gap);
void assert_error (garray_T * gap);
static void f_assert_equal (typval_T * argvars, typval_T * rettv);
void assert_equal_common (typval_T * argvars, assert_type_T atype);
void fill_assert_error (garray_T * gap, typval_T * opt_msg_tv, char_u * exp_str, typval_T * exp_tv, typval_T * got_tv, assert_type_T atype);
static void ga_concat_esc (garray_T * gap, char_u * str);
static void f_assert_notequal (typval_T * argvars, typval_T * rettv);
static void f_assert_exception (typval_T * argvars, typval_T * rettv);
void assert_exception (typval_T * argvars);
static void f_assert_fails (typval_T * argvars, typval_T * rettv);
void assert_fails (typval_T * argvars);
static void f_assert_false (typval_T * argvars, typval_T * rettv);
void assert_bool (typval_T * argvars, int isTrue);
static void f_assert_inrange (typval_T * argvars, typval_T * rettv);
void assert_inrange (typval_T * argvars);
static void f_assert_match (typval_T * argvars, typval_T * rettv);
void assert_match_common (typval_T * argvars, assert_type_T atype);
static void f_assert_notmatch (typval_T * argvars, typval_T * rettv);
static void f_assert_report (typval_T * argvars, typval_T * rettv);
void assert_report (typval_T * argvars);
static void f_assert_true (typval_T * argvars, typval_T * rettv);
static void f_asin (typval_T * argvars, typval_T * rettv);
static void f_atan (typval_T * argvars, typval_T * rettv);
static void f_atan2 (typval_T * argvars, typval_T * rettv);
static void f_balloon_show (typval_T * argvars, typval_T * rettv);
static void f_balloon_split (typval_T * argvars, typval_T * rettv);
static void f_browse (typval_T * argvars, typval_T * rettv);
static void f_browsedir (typval_T * argvars, typval_T * rettv);
static void f_bufexists (typval_T * argvars, typval_T * rettv);
static void f_buflisted (typval_T * argvars, typval_T * rettv);
static void f_bufloaded (typval_T * argvars, typval_T * rettv);
static void f_bufname (typval_T * argvars, typval_T * rettv);
static void f_bufnr (typval_T * argvars, typval_T * rettv);
static void f_bufwinid (typval_T * argvars, typval_T * rettv);
static void buf_win_common (typval_T * argvars, typval_T * rettv, int get_nr);
static void f_bufwinnr (typval_T * argvars, typval_T * rettv);
static void f_byte2line (typval_T * argvars, typval_T * rettv);
static void f_byteidx (typval_T * argvars, typval_T * rettv);
static void byteidx (typval_T * argvars, typval_T * rettv, int comp);
static void f_byteidxcomp (typval_T * argvars, typval_T * rettv);
static void f_call (typval_T * argvars, typval_T * rettv);
static void f_ceil (typval_T * argvars, typval_T * rettv);
static void f_ch_canread (typval_T * argvars, typval_T * rettv);
channel_T *get_channel_arg (typval_T *tv, int check_open, int reading, ch_part_T part);
ch_part_T channel_part_read (channel_T * channel);
static void f_ch_close (typval_T * argvars, typval_T * rettv);
static void f_ch_close_in (typval_T * argvars, typval_T * rettv);
void channel_close_in (channel_T * channel);
static void f_ch_getbufnr (typval_T * argvars, typval_T * rettv);
static void f_ch_getjob (typval_T * argvars, typval_T * rettv);
static void f_ch_info (typval_T * argvars, typval_T * rettv);
void channel_info (channel_T * channel, dict_T * dict);
static void channel_part_info (channel_T * channel, dict_T * dict, char * name, ch_part_T part);
static void f_ch_log (typval_T * argvars, typval_T * rettv);
static void f_ch_logfile (typval_T * argvars, typval_T * rettv);
void ch_logfile (char_u * fname, char_u * opt);
static void f_ch_open (typval_T * argvars, typval_T * rettv);
channel_T *channel_open_func (typval_T *argvars);
channel_T *channel_open (char *hostname, int port_in, int waittime, void (*nb_close_cb) (void));
void channel_init_winsock (void);
static void f_ch_read (typval_T * argvars, typval_T * rettv);
void common_channel_read (typval_T * argvars, typval_T * rettv, int raw);
ch_mode_T channel_get_mode (channel_T * channel, ch_part_T part);
int channel_get_timeout (channel_T * channel, ch_part_T part);
static char_u *channel_read_block (channel_T *channel, ch_part_T part, int timeout, int raw);
static int channel_read_json_block (channel_T * channel, ch_part_T part, int timeout_arg, int id, typval_T * * rettv);
static void f_ch_readraw (typval_T * argvars, typval_T * rettv);
static void f_ch_evalexpr (typval_T * argvars, typval_T * rettv);
void ch_expr_common (typval_T * argvars, typval_T * rettv, int eval);
ch_part_T channel_part_send (channel_T * channel);
static channel_T *send_common (typval_T *argvars, char_u *text, int id, int eval, jobopt_T *opt, char *fun, ch_part_T *part_read);
void channel_set_req_callback (channel_T * channel, ch_part_T part, char_u * callback, partial_T * partial, int id);
static void f_ch_sendexpr (typval_T * argvars, typval_T * rettv);
static void f_ch_evalraw (typval_T * argvars, typval_T * rettv);
void ch_raw_common (typval_T * argvars, typval_T * rettv, int eval);
static void f_ch_sendraw (typval_T * argvars, typval_T * rettv);
static void f_ch_setoptions (typval_T * argvars, typval_T * rettv);
static void f_ch_status (typval_T * argvars, typval_T * rettv);
static void f_changenr (typval_T * argvars, typval_T * rettv);
static void f_char2nr (typval_T * argvars, typval_T * rettv);
static void f_cindent (typval_T * argvars, typval_T * rettv);
static void f_clearmatches (typval_T * argvars, typval_T * rettv);
static void f_col (typval_T * argvars, typval_T * rettv);
static void f_complete (typval_T * argvars, typval_T * rettv);
void set_completion (colnr_T startcol, list_T * list);
static void ins_compl_add_list (list_T * list);
int ins_compl_add_tv (typval_T * tv, int dir);
char_u *get_dict_string (dict_T *d, char_u *key, int save);
varnumber_T get_dict_number (dict_T * d, char_u * key);
static void f_complete_add (typval_T * argvars, typval_T * rettv);
static void f_complete_check (typval_T * argvars, typval_T * rettv);
static void f_confirm (typval_T * argvars, typval_T * rettv);
static void f_copy (typval_T * argvars, typval_T * rettv);
static void f_cos (typval_T * argvars, typval_T * rettv);
static void f_cosh (typval_T * argvars, typval_T * rettv);
static void f_count (typval_T * argvars, typval_T * rettv);
static void f_cscope_connection (typval_T * argvars, typval_T * rettv);
static void f_cursor (typval_T * argvars, typval_T * rettv);
int list2fpos (typval_T * arg, pos_T * posp, int * fnump, colnr_T * curswantp);
static void f_deepcopy (typval_T * argvars, typval_T * rettv);
static void f_delete (typval_T * argvars, typval_T * rettv);
static void f_did_filetype (typval_T * argvars, typval_T * rettv);
static void f_diff_filler (typval_T * argvars, typval_T * rettv);
static void f_diff_hlID (typval_T * argvars, typval_T * rettv);
static void f_empty (typval_T * argvars, typval_T * rettv);
static void f_escape (typval_T * argvars, typval_T * rettv);
static void f_eval (typval_T * argvars, typval_T * rettv);
static void f_eventhandler (typval_T * argvars, typval_T * rettv);
static void f_executable (typval_T * argvars, typval_T * rettv);
static void f_execute (typval_T * argvars, typval_T * rettv);
static char_u *get_list_line (int c, void *cookie, int indent);
static void f_exepath (typval_T * argvars, typval_T * rettv);
static void f_exists (typval_T * argvars, typval_T * rettv);
int cmd_exists (char_u * name);
int autocmd_supported (char_u * name);
int au_exists (char_u * arg);
int var_exists (char_u * var);
static void f_exp (typval_T * argvars, typval_T * rettv);
static void f_expand (typval_T * argvars, typval_T * rettv);
static void f_extend (typval_T * argvars, typval_T * rettv);
void dict_extend (dict_T * d1, dict_T * d2, char_u * action);
static dictitem_T *dictitem_copy (dictitem_T *org);
static void f_feedkeys (typval_T * argvars, typval_T * rettv);
static void f_filereadable (typval_T * argvars, typval_T * rettv);
static void f_filewritable (typval_T * argvars, typval_T * rettv);
int filewritable (char_u * fname);
static void f_filter (typval_T * argvars, typval_T * rettv);
void filter_map (typval_T * argvars, typval_T * rettv, int map);
static int filter_map_one (typval_T * tv, typval_T * expr, int map, int * remp);
static int eval_expr_typval (typval_T * expr, typval_T * argv, int argc, typval_T * rettv);
void listitem_remove (list_T * l, listitem_T * item);
void vimlist_remove (list_T * l, listitem_T * item, listitem_T * item2);
void list_fix_watch (list_T * l, listitem_T * item);
void listitem_free (listitem_T * item);
static void f_finddir (typval_T * argvars, typval_T * rettv);
static void findfilendir (typval_T * argvars, typval_T * rettv, int find_what);
static void f_findfile (typval_T * argvars, typval_T * rettv);
static void f_float2nr (typval_T * argvars, typval_T * rettv);
static void f_floor (typval_T * argvars, typval_T * rettv);
static void f_fmod (typval_T * argvars, typval_T * rettv);
static void f_fnameescape (typval_T * argvars, typval_T * rettv);
static void f_fnamemodify (typval_T * argvars, typval_T * rettv);
static void f_foldclosed (typval_T * argvars, typval_T * rettv);
static void foldclosed_both (typval_T * argvars, typval_T * rettv, int end);
static void f_foldclosedend (typval_T * argvars, typval_T * rettv);
static void f_foldlevel (typval_T * argvars, typval_T * rettv);
int foldLevel (linenr_T lnum);
static void f_foldtext (typval_T * argvars, typval_T * rettv);
void foldtext_cleanup (char_u * str);
static void f_foldtextresult (typval_T * argvars, typval_T * rettv);
static void f_foreground (typval_T * argvars, typval_T * rettv);
static void f_funcref (typval_T * argvars, typval_T * rettv);
static void common_function (typval_T * argvars, typval_T * rettv, int is_funcref);
static void f_function (typval_T * argvars, typval_T * rettv);
static void f_garbagecollect (typval_T * argvars, typval_T * rettv);
static void f_get (typval_T * argvars, typval_T * rettv);
static void f_getbufinfo (typval_T * argvars, typval_T * rettv);
static dict_T *get_buffer_info (buf_T *buf);
int dict_add_dict (dict_T * d, char * key, dict_T * dict);
static void get_buffer_signs (buf_T * buf, list_T * l);
char_u *sign_typenr2name (int typenr);
static void f_getbufline (typval_T * argvars, typval_T * rettv);
static linenr_T get_tv_lnum_buf (typval_T * argvars, buf_T * buf);
static void get_buffer_lines (buf_T * buf, linenr_T start, linenr_T end, int retlist, typval_T * rettv);
static void f_getbufvar (typval_T * argvars, typval_T * rettv);
dict_T *get_winbuf_options (int bufopt);
static void f_getchangelist (typval_T * argvars, typval_T * rettv);
int list_append_list (list1, list2);
static void f_getchar (typval_T * argvars, typval_T * rettv);
static void f_getcharmod (typval_T * argvars, typval_T * rettv);
static void f_getcharsearch (typval_T * argvars, typval_T * rettv);
char_u *last_csearch (void);
int last_csearch_forward (void);
int last_csearch_until (void);
static void f_getcmdline (typval_T * argvars, typval_T * rettv);
char_u *get_cmdline_str (void);
static struct cmdline_info *get_ccline_ptr (void);
static void f_getcmdpos (typval_T * argvars, typval_T * rettv);
int get_cmdline_pos (void);
static void f_getcmdtype (typval_T * argvars, typval_T * rettv);
int get_cmdline_type (void);
static void f_getcmdwintype (typval_T * argvars, typval_T * rettv);
static void f_getcompletion (typval_T * argvars, typval_T * rettv);
int cmdcomplete_str_to_type (char_u * complete_str);
static void f_getcwd (typval_T * argvars, typval_T * rettv);
static void f_getfontname (typval_T * argvars, typval_T * rettv);
char_u *gui_mch_get_fontname (GuiFont font, char_u *name);
static void f_getfperm (typval_T * argvars, typval_T * rettv);
static void f_getfsize (typval_T * argvars, typval_T * rettv);
static void f_getftime (typval_T * argvars, typval_T * rettv);
static void f_getftype (typval_T * argvars, typval_T * rettv);
static void f_getjumplist (typval_T * argvars, typval_T * rettv);
static void f_getline (typval_T * argvars, typval_T * rettv);
static void f_getloclist (typval_T * argvars, typval_T * rettv);
static void get_qf_loc_list (int is_qf, win_T * wp, typval_T * what_arg, typval_T * rettv);
int get_errorlist (qf_info_T * qi_arg, win_T * wp, int qf_idx, list_T * list);
int qf_get_properties (win_T * wp, dict_T * what, dict_T * retdict);
static int qf_get_list_from_lines (dict_T * what, dictitem_T * di, dict_T * retdict);
static int qf_init_ext (qf_info_T * qi, int qf_idx, char_u * efile, buf_T * buf, typval_T * tv, char_u * errorformat, int newlist, linenr_T lnumfirst, linenr_T lnumlast, char_u * qf_title, char_u * enc);
char_u *alloc_id (unsigned  size, alloc_id_T id);
static int alloc_does_fail (long_u size);
static void qf_new_list (qf_info_T * qi, char_u * qf_title);
static void qf_store_title (qf_info_T * qi, int qf_idx, char_u * title);
static void free_efm_list (efm_T * * efm_first);
static efm_T *parse_efm_option (char_u *efm);
static int efm_to_regpat (char_u * efm, int len, efm_T * fmt_ptr, char_u * regpat, char_u * errmsg);
static int qf_get_nextline (qfstate_T * state);
static int qf_get_next_str_line (qfstate_T * state);
static char_u *qf_grow_linebuf (qfstate_T *state, int newsz);
static int qf_get_next_list_line (qfstate_T * state);
static int qf_get_next_buf_line (qfstate_T * state);
static int qf_get_next_file_line (qfstate_T * state);
static int qf_parse_line (qf_info_T * qi, int qf_idx, char_u * linebuf, int linelen, efm_T * fmt_first, qffields_T * fields);
static char_u *qf_push_dir (char_u *dirbuf, struct dir_stack_T **stackptr, int is_file_stack);
static char_u *qf_pop_dir (struct dir_stack_T **stackptr);
static void qf_update_buffer (qf_info_T * qi, qfline_T * old_last);
static buf_T *qf_find_buf (qf_info_T *qi);
static int is_qf_win (win_T * win, qf_info_T * qi);
static void qf_update_win_titlevar (qf_info_T * qi);
static win_T *qf_find_win (qf_info_T *qi);
static void qf_set_title_var (qf_info_T * qi);
static void qf_fill_buffer (qf_info_T * qi, buf_T * buf, qfline_T * old_last);
static char_u *qf_types (int c, int nr);
static void qf_fmt_text (char_u * text, char_u * buf, int bufsize);
static int qf_win_pos_update (qf_info_T * qi, int old_qf_index);
static void qf_win_goto (win_T * win, linenr_T lnum);
static int qf_id2nr (qf_info_T * qi, int_u qfid);
static int qf_winid (qf_info_T * qi);
static void f_getmatches (typval_T * argvars, typval_T * rettv);
char_u *syn_id2name (int id);
static void f_getpid (typval_T * argvars, typval_T * rettv);
static void f_getcurpos (typval_T * argvars, typval_T * rettv);
static void getpos_both (typval_T * argvars, typval_T * rettv, int getcurpos);
static void f_getpos (typval_T * argvars, typval_T * rettv);
static void f_getqflist (typval_T * argvars, typval_T * rettv);
static void f_getreg (typval_T * argvars, typval_T * rettv);
static void f_getregtype (typval_T * argvars, typval_T * rettv);
static void f_gettabinfo (typval_T * argvars, typval_T * rettv);
static dict_T *get_tabpage_info (tabpage_T *tp, int tp_idx);
static void f_gettabvar (typval_T * argvars, typval_T * rettv);
static void f_gettabwinvar (typval_T * argvars, typval_T * rettv);
void getwinvar (typval_T * argvars, typval_T * rettv, int off);
static void f_getwininfo (typval_T * argvars, typval_T * rettv);
win_T *win_id2wp (typval_T *argvars);
static dict_T *get_win_info (win_T *wp, short  tpnr, short  winnr);
static void f_win_findbuf (typval_T * argvars, typval_T * rettv);
void win_findbuf (typval_T * argvars, list_T * list);
static void f_win_getid (typval_T * argvars, typval_T * rettv);
int win_getid (typval_T * argvars);
static void f_win_gotoid (typval_T * argvars, typval_T * rettv);
int win_gotoid (typval_T * argvars);
static void f_win_id2tabwin (typval_T * argvars, typval_T * rettv);
void win_id2tabwin (typval_T * argvars, list_T * list);
static void f_win_id2win (typval_T * argvars, typval_T * rettv);
int win_id2win (typval_T * argvars);
static void f_win_screenpos (typval_T * argvars, typval_T * rettv);
static void f_getwinposx (typval_T * argvars, typval_T * rettv);
static void f_getwinposy (typval_T * argvars, typval_T * rettv);
static void f_getwinvar (typval_T * argvars, typval_T * rettv);
static void f_glob (typval_T * argvars, typval_T * rettv);
static void f_globpath (typval_T * argvars, typval_T * rettv);
static void f_glob2regpat (typval_T * argvars, typval_T * rettv);
static void f_has (typval_T * argvars, typval_T * rettv);
int has_patch (int n);
int mch_input_isatty (void);
static void f_has_key (typval_T * argvars, typval_T * rettv);
static void f_haslocaldir (typval_T * argvars, typval_T * rettv);
static void f_hasmapto (typval_T * argvars, typval_T * rettv);
int map_to_exists (char_u * str, char_u * modechars, int abbr);
static void f_histadd (typval_T * argvars, typval_T * rettv);
static void f_histdel (typval_T * argvars, typval_T * rettv);
static void f_histget (typval_T * argvars, typval_T * rettv);
static void f_histnr (typval_T * argvars, typval_T * rettv);
static void f_hlID (typval_T * argvars, typval_T * rettv);
static void f_hlexists (typval_T * argvars, typval_T * rettv);
int highlight_exists (char_u * name);
static void f_hostname (typval_T * argvars, typval_T * rettv);
static void f_iconv (typval_T * argvars, typval_T * rettv);
static void f_indent (typval_T * argvars, typval_T * rettv);
static void f_index (typval_T * argvars, typval_T * rettv);
static void f_input (typval_T * argvars, typval_T * rettv);
void get_user_input (typval_T * argvars, typval_T * rettv, int inputdialog, int secret);
void stuffReadbuffSpec (char_u * s);
int parse_compl_arg (char_u * value, int vallen, int * complp, long * argt, char_u * * compl_arg);
static void f_inputdialog (typval_T * argvars, typval_T * rettv);
static void f_inputlist (typval_T * argvars, typval_T * rettv);
int prompt_for_number (int * mouse_used);
static void f_inputrestore (typval_T * argvars, typval_T * rettv);
static void f_inputsave (typval_T * argvars, typval_T * rettv);
static void f_inputsecret (typval_T * argvars, typval_T * rettv);
static void f_insert (typval_T * argvars, typval_T * rettv);
static void f_invert (typval_T * argvars, typval_T * rettv);
static void f_isdirectory (typval_T * argvars, typval_T * rettv);
static void f_islocked (typval_T * argvars, typval_T * rettv);
static int tv_islocked (typval_T * tv);
static void f_items (typval_T * argvars, typval_T * rettv);
void dict_list (typval_T * argvars, typval_T * rettv, int what);
static void f_job_getchannel (typval_T * argvars, typval_T * rettv);
static job_T *get_job_arg (typval_T *tv);
static void f_job_info (typval_T * argvars, typval_T * rettv);
void job_info (job_T * job, dict_T * dict);
static void f_job_setoptions (typval_T * argvars, typval_T * rettv);
static void f_job_start (typval_T * argvars, typval_T * rettv);
static void f_job_status (typval_T * argvars, typval_T * rettv);
static void f_job_stop (typval_T * argvars, typval_T * rettv);
static void f_join (typval_T * argvars, typval_T * rettv);
static void f_js_decode (typval_T * argvars, typval_T * rettv);
int json_decode_all (js_read_T * reader, typval_T * res, int options);
static void f_js_encode (typval_T * argvars, typval_T * rettv);
static void f_json_decode (typval_T * argvars, typval_T * rettv);
static void f_json_encode (typval_T * argvars, typval_T * rettv);
static void f_keys (typval_T * argvars, typval_T * rettv);
static void f_last_buffer_nr (typval_T * argvars, typval_T * rettv);
static void f_len (typval_T * argvars, typval_T * rettv);
static void f_libcall (typval_T * argvars, typval_T * rettv);
static void libcall_common (typval_T * argvars, typval_T * rettv, int type);
static void get_exe_name (void);
static void f_libcallnr (typval_T * argvars, typval_T * rettv);
static void f_line2byte (typval_T * argvars, typval_T * rettv);
static void f_lispindent (typval_T * argvars, typval_T * rettv);
static void f_localtime (typval_T * argvars, typval_T * rettv);
static void f_log (typval_T * argvars, typval_T * rettv);
static void f_log10 (typval_T * argvars, typval_T * rettv);
static void f_map (typval_T * argvars, typval_T * rettv);
static void f_maparg (typval_T * argvars, typval_T * rettv);
static void get_maparg (typval_T * argvars, typval_T * rettv, int exact);
char_u *check_map (char_u *keys, int mode, int exact, int ign_mod, int abbr, mapblock_T **mp_ptr, int *local_ptr);
char_u *str2special_save (char_u *str, int is_lhs);
static void f_mapcheck (typval_T * argvars, typval_T * rettv);
static void f_match (typval_T * argvars, typval_T * rettv);
static void find_some_match (typval_T * argvars, typval_T * rettv, matchtype_T type);
static void f_matchadd (typval_T * argvars, typval_T * rettv);
int match_add (win_T * wp, char_u * grp, char_u * pat, int prio, int id, list_T * pos_list, char_u * conceal_char);
static void f_matchaddpos (typval_T * argvars, typval_T * rettv);
static void f_matcharg (typval_T * argvars, typval_T * rettv);
matchitem_T *get_match (win_T *wp, int id);
static void f_matchdelete (typval_T * argvars, typval_T * rettv);
int match_delete (win_T * wp, int id, int perr);
static void f_matchend (typval_T * argvars, typval_T * rettv);
static void f_matchlist (typval_T * argvars, typval_T * rettv);
static void f_matchstr (typval_T * argvars, typval_T * rettv);
static void f_matchstrpos (typval_T * argvars, typval_T * rettv);
static void f_max (typval_T * argvars, typval_T * rettv);
static void max_min (typval_T * argvars, typval_T * rettv, int domax);
static void f_min (typval_T * argvars, typval_T * rettv);
static void f_mode (typval_T * argvars, typval_T * rettv);
int ctrl_x_mode_not_defined_yet (void);
static int non_zero_arg (typval_T * argvars);
static void f_nextnonblank (typval_T * argvars, typval_T * rettv);
static void f_nr2char (typval_T * argvars, typval_T * rettv);
static void f_or (typval_T * argvars, typval_T * rettv);
static void f_pathshorten (typval_T * argvars, typval_T * rettv);
static void f_pow (typval_T * argvars, typval_T * rettv);
static void f_prevnonblank (typval_T * argvars, typval_T * rettv);
static void f_printf (typval_T * argvars, typval_T * rettv);
static void f_pumvisible (typval_T * argvars, typval_T * rettv);
static void f_range (typval_T * argvars, typval_T * rettv);
static void f_readfile (typval_T * argvars, typval_T * rettv);
static void f_reltime (typval_T * argvars, typval_T * rettv);
static int list2proftime (typval_T * arg, proftime_T * tm);
static void f_reltimefloat (typval_T * argvars, typval_T * rettv);
float_T profile_float (proftime_T * tm);
static void f_reltimestr (typval_T * argvars, typval_T * rettv);
static void f_remote_expr (typval_T * argvars, typval_T * rettv);
static void remote_common (typval_T * argvars, typval_T * rettv, int expr);
int sendToLocalVim (char_u * cmd, int asExpr, char_u * * result);
static void f_remote_foreground (typval_T * argvars, typval_T * rettv);
void serverForeground (char_u * name);
static HWND findServer (char_u * name);
static BOOL CALLBACK enumWindowsGetServer (HWND hwnd, LPARAM lparam);
static int getVimServerName (HWND hwnd, char * name, int namelen);
static void f_remote_peek (typval_T * argvars, typval_T * rettv);
char_u *serverGetReply (HWND server, int *expr_res, int remove, int wait, int timeout);
void serverProcessPendingMessages (void);
static void f_remote_read (typval_T * argvars, typval_T * rettv);
static void f_remote_send (typval_T * argvars, typval_T * rettv);
static void f_remote_startserver (typval_T * argvars, typval_T * rettv);
void serverSetName (char_u * name);
static void f_remove (typval_T * argvars, typval_T * rettv);
static void f_rename (typval_T * argvars, typval_T * rettv);
static void f_repeat (typval_T * argvars, typval_T * rettv);
static void f_resolve (typval_T * argvars, typval_T * rettv);
static void f_reverse (typval_T * argvars, typval_T * rettv);
static void f_round (typval_T * argvars, typval_T * rettv);
float_T vim_round (float_T f);
static void f_screenattr (typval_T * argvars, typval_T * rettv);
static void f_screenchar (typval_T * argvars, typval_T * rettv);
static void f_screencol (typval_T * argvars, typval_T * rettv);
int screen_screencol (void);
static void f_screenrow (typval_T * argvars, typval_T * rettv);
int screen_screenrow (void);
static void f_search (typval_T * argvars, typval_T * rettv);
static int search_cmn (typval_T * argvars, pos_T * match_pos, int * flagsp);
static int get_search_arg (typval_T * varp, int * flagsp);
static void f_searchdecl (typval_T * argvars, typval_T * rettv);
int find_decl (char_u * ptr, int len, int locally, int thisblock, int flags_arg);
static int is_ident (char_u * line, int offset);
void reset_search_dir (void);
static void f_searchpair (typval_T * argvars, typval_T * rettv);
static int searchpair_cmn (typval_T * argvars, pos_T * match_pos);
long  do_searchpair (char_u * spat, char_u * mpat, char_u * epat, int dir, typval_T * skip, int flags, pos_T * match_pos, linenr_T lnum_stop, long time_limit);
int eval_expr_to_bool (typval_T * expr, int * error);
static void f_searchpairpos (typval_T * argvars, typval_T * rettv);
static void f_searchpos (typval_T * argvars, typval_T * rettv);
static void f_server2client (typval_T * argvars, typval_T * rettv);
static void f_serverlist (typval_T * argvars, typval_T * rettv);
static void f_setbufline (argvars, rettv);
static void set_buffer_lines (buf_T * buf, linenr_T lnum, typval_T * lines, typval_T * rettv);
static void f_setbufvar (typval_T * argvars, typval_T * rettv);
static void f_setcharsearch (typval_T * argvars, typval_T * rettv);
void set_last_csearch (int c, char_u * s, int len);
void set_csearch_direction (int cdir);
void set_csearch_until (int t_cmd);
static void f_setcmdpos (typval_T * argvars, typval_T * rettv);
int set_cmdline_pos (int pos);
static void f_setfperm (typval_T * argvars, typval_T * rettv);
static void f_setline (typval_T * argvars, typval_T * rettv);
static void f_setloclist (typval_T * argvars, typval_T * rettv);
static void set_qf_ll_list (win_T * wp, typval_T * list_arg, typval_T * action_arg, typval_T * what_arg, typval_T * rettv);
int set_errorlist (win_T * wp, list_T * list, int action, char_u * title, dict_T * what);
static qf_info_T *ll_get_or_alloc_list (win_T *wp);
static void qf_free_stack (win_T * wp, qf_info_T * qi);
static win_T *find_win_with_ll (qf_info_T *qi);
static int qf_set_properties (qf_info_T * qi, dict_T * what, int action, char_u * title);
static int qf_add_entries (qf_info_T * qi, int qf_idx, list_T * list, char_u * title, int action);
static void qf_list_changed (qf_info_T * qi, int qf_idx);
static void f_setmatches (typval_T * argvars, typval_T * rettv);
static void f_setpos (typval_T * argvars, typval_T * rettv);
static void f_setqflist (typval_T * argvars, typval_T * rettv);
static void f_setreg (typval_T * argvars, typval_T * rettv);
void write_reg_contents_lst (int name, char_u * * strings, int maxlen, int must_append, int yank_type, long block_len);
static void f_settabvar (typval_T * argvars, typval_T * rettv);
static void f_settabwinvar (typval_T * argvars, typval_T * rettv);
void setwinvar (typval_T * argvars, typval_T * rettv, int off);
static void f_setwinvar (typval_T * argvars, typval_T * rettv);
static void f_sha256 (typval_T * argvars, typval_T * rettv);
char_u *sha256_bytes (char_u *buf, int buf_len, char_u *salt, int salt_len);
int sha256_self_test (void);
static void f_shellescape (typval_T * argvars, typval_T * rettv);
static void f_shiftwidth (typval_T * argvars, typval_T * rettv);
static void f_simplify (typval_T * argvars, typval_T * rettv);
static void f_sin (typval_T * argvars, typval_T * rettv);
static void f_sinh (typval_T * argvars, typval_T * rettv);
static void f_sort (typval_T * argvars, typval_T * rettv);
static void do_sort_uniq (typval_T * argvars, typval_T * rettv, int sort);
static int item_compare2 (const void * s1, const void * s2);
static int item_compare (const void * s1, const void * s2);
float_T get_tv_float (typval_T * varp);
static void f_uniq (typval_T * argvars, typval_T * rettv);
static void f_soundfold (typval_T * argvars, typval_T * rettv);
char_u *eval_soundfold (char_u *word);
static void f_spellbadword (typval_T * argvars, typval_T * rettv);
static void f_spellsuggest (typval_T * argvars, typval_T * rettv);
static void f_split (typval_T * argvars, typval_T * rettv);
static void f_sqrt (typval_T * argvars, typval_T * rettv);
static void f_str2float (typval_T * argvars, typval_T * rettv);
static void f_str2nr (typval_T * argvars, typval_T * rettv);
static void f_strgetchar (typval_T * argvars, typval_T * rettv);
static void f_stridx (typval_T * argvars, typval_T * rettv);
static void f_string (typval_T * argvars, typval_T * rettv);
static void f_strlen (typval_T * argvars, typval_T * rettv);
static void f_strchars (typval_T * argvars, typval_T * rettv);
static void f_strdisplaywidth (typval_T * argvars, typval_T * rettv);
static void f_strwidth (typval_T * argvars, typval_T * rettv);
static void f_strcharpart (typval_T * argvars, typval_T * rettv);
static void f_strpart (typval_T * argvars, typval_T * rettv);
static void f_strridx (typval_T * argvars, typval_T * rettv);
static void f_strtrans (typval_T * argvars, typval_T * rettv);
static void f_submatch (typval_T * argvars, typval_T * rettv);
char_u *reg_submatch (int no);
static char_u *reg_getline_submatch (linenr_T lnum);
list_T *reg_submatch_list (int no);
static void f_substitute (typval_T * argvars, typval_T * rettv);
static void f_synID (typval_T * argvars, typval_T * rettv);
static void f_synIDattr (typval_T * argvars, typval_T * rettv);
char_u *highlight_color (int id, char_u *what, int modec);
char_u *highlight_has_attr (int id, int flag, int modec);
static void f_synIDtrans (typval_T * argvars, typval_T * rettv);
static void f_synconcealed (typval_T * argvars, typval_T * rettv);
static void f_synstack (typval_T * argvars, typval_T * rettv);
int syn_get_stack_item (int i);
static void f_system (typval_T * argvars, typval_T * rettv);
static void get_cmd_output_as_rettv (typval_T * argvars, typval_T * rettv, int retlist);
int write_list (FILE * fd, list_T * list, int binary);
static void f_systemlist (typval_T * argvars, typval_T * rettv);
static void f_tabpagebuflist (typval_T * argvars, typval_T * rettv);
static void f_tabpagenr (typval_T * argvars, typval_T * rettv);
static void f_tabpagewinnr (typval_T * argvars, typval_T * rettv);
static int get_winnr (tabpage_T * tp, typval_T * argvar);
static void f_tagfiles (typval_T * argvars, typval_T * rettv);
static void f_taglist (typval_T * argvars, typval_T * rettv);
int get_tags (list_T * list, char_u * pat, char_u * buf_fname);
static char_u *tag_full_fname (tagptrs_T *tagp);
static int add_tag_field (dict_T * dict, char * field_name, char_u * start, char_u * end);
static void f_tempname (typval_T * argvars, typval_T * rettv);
static void f_tan (typval_T * argvars, typval_T * rettv);
static void f_tanh (typval_T * argvars, typval_T * rettv);
static void f_test_alloc_fail (typval_T * argvars, typval_T * rettv);
static void f_test_autochdir (typval_T * argvars, typval_T * rettv);
static void f_test_feedinput (typval_T * argvars, typval_T * rettv);
static void f_test_override (typval_T * argvars, typval_T * rettv);
static void f_test_garbagecollect_now (typval_T * argvars, typval_T * rettv);
static void f_test_ignore_error (typval_T * argvars, typval_T * rettv);
void ignore_error_for_testing (char_u * error);
static void f_test_null_channel (typval_T * argvars, typval_T * rettv);
static void f_test_null_dict (typval_T * argvars, typval_T * rettv);
static void f_test_null_job (typval_T * argvars, typval_T * rettv);
static void f_test_null_list (typval_T * argvars, typval_T * rettv);
static void f_test_null_partial (typval_T * argvars, typval_T * rettv);
static void f_test_null_string (typval_T * argvars, typval_T * rettv);
static void f_test_settime (typval_T * argvars, typval_T * rettv);
static void f_timer_info (typval_T * argvars, typval_T * rettv);
timer_T *find_timer (long  id);
void add_timer_info (typval_T * rettv, timer_T * timer);
void add_timer_info_all (typval_T * rettv);
static void f_timer_pause (typval_T * argvars, typval_T * rettv);
static void f_timer_start (typval_T * argvars, typval_T * rettv);
timer_T *create_timer (long  msec, int repeat);
static void insert_timer (timer_T * timer);
static void f_timer_stop (typval_T * argvars, typval_T * rettv);
void stop_timer (timer_T * timer);
static void f_timer_stopall (typval_T * argvars, typval_T * rettv);
void stop_all_timers (void);
static void f_tolower (typval_T * argvars, typval_T * rettv);
char_u *strlow_save (char_u *orig);
static void f_toupper (typval_T * argvars, typval_T * rettv);
char_u *strup_save (char_u *orig);
static void f_tr (typval_T * argvars, typval_T * rettv);
static void f_trunc (typval_T * argvars, typval_T * rettv);
static void f_type (typval_T * argvars, typval_T * rettv);
static void f_undofile (typval_T * argvars, typval_T * rettv);
static void f_undotree (typval_T * argvars, typval_T * rettv);
void u_eval_tree (u_header_T * first_uhp, list_T * list);
static void f_values (typval_T * argvars, typval_T * rettv);
static void f_virtcol (typval_T * argvars, typval_T * rettv);
static void f_visualmode (typval_T * argvars, typval_T * rettv);
static void f_wildmenumode (typval_T * argvars, typval_T * rettv);
static void f_winbufnr (typval_T * argvars, typval_T * rettv);
static void f_wincol (typval_T * argvars, typval_T * rettv);
static void f_winheight (typval_T * argvars, typval_T * rettv);
static void f_winline (typval_T * argvars, typval_T * rettv);
static void f_winnr (typval_T * argvars, typval_T * rettv);
static void f_winrestcmd (typval_T * argvars, typval_T * rettv);
static void f_winrestview (typval_T * argvars, typval_T * rettv);
static void f_winsaveview (typval_T * argvars, typval_T * rettv);
static void f_winwidth (typval_T * argvars, typval_T * rettv);
static void f_wordcount (typval_T * argvars, typval_T * rettv);
void cursor_pos_info (dict_T * dict);
static varnumber_T line_count_info (char_u * line, varnumber_T * wc, varnumber_T * cc, varnumber_T limit, int eol_size);
static void f_writefile (typval_T * argvars, typval_T * rettv);
static void f_xor (typval_T * argvars, typval_T * rettv);
static void nv_ignore (cmdarg_T * cap);
static void nv_nop (cmdarg_T * cap);
static void nv_error (cmdarg_T * cap);
static void nv_help (cmdarg_T * cap);
static int checkclearopq (oparg_T * oap);
void ex_help (exarg_T * eap);
char_u *check_help_lang (char_u *arg);
int do_tag (char_u * tag, int type, int count, int forceit, int verbose);
static void taglen_advance (int l);
char_u *msg_outtrans_one (char_u *p, int attr);
static int jumpto_tag (char_u * lbuf_arg, int forceit, int keep_help);
static size_t matching_line_len (char_u * lbuf);
static void nv_addsub (cmdarg_T * cap);
static void prep_redo_cmd (cmdarg_T * cap);
static void nv_operator (cmdarg_T * cap);
static void nv_lineop (cmdarg_T * cap);
static int checkclearop (oparg_T * oap);
static void set_op_var (int optype);
static void nv_page (cmdarg_T * cap);
static void nv_mousescroll (cmdarg_T * cap);
static void nv_scroll_line (cmdarg_T * cap);
static void nv_mouse (cmdarg_T * cap);
static void nv_zet (cmdarg_T * cap);
int foldManualAllowed (int create);
void openFoldRecurse (linenr_T lnum);
void closeFoldRecurse (linenr_T lnum);
int getDeepestNesting (void);
static int getDeepestNestingRecurse (garray_T * gap);
int foldMoveTo (int updown, int dir, long count);
int get_visual_text (cmdarg_T * cap, char_u * * pp, int * lenp);
void spell_add_word (char_u * word, int len, int bad, int idx, int undo);
static void init_spellfile (void);
void mkspell (int fcount, char_u * * fnames, int ascii, int over_write, int added_word);
static wordnode_T *wordtree_alloc (spellinfo_T *spin);
static void *getroom (spellinfo_T *spin, size_t len, int align);
static void free_blocks (sblock_T * bl);
static afffile_T *spell_read_aff (spellinfo_T *spin, char_u *fname);
static void spell_message (spellinfo_T * spin, char_u * str);
static int spell_info_item (char_u * s);
static int is_aff_rule (char_u * * items, int itemcnt, char * rulename, int mincount);
static char_u *getroom_save (spellinfo_T *spin, char_u *s);
static unsigned  affitem2flag (int flagtype, char_u * item, char_u * fname, int lnum);
static unsigned  get_affitem (int flagtype, char_u * * pp);
static void check_renumber (spellinfo_T * spin);
static void aff_process_flags (afffile_T * affile, affentry_T * entry);
static int str_equal (char_u * s1, char_u * s2);
static int tree_add_word (spellinfo_T * spin, char_u * word, wordnode_T * root, int flags, int region, int affixID);
static wordnode_T *get_wordnode (spellinfo_T *spin);
static void wordtree_compress (spellinfo_T * spin, wordnode_T * root);
static int node_compress (spellinfo_T * spin, wordnode_T * node, hashtab_T * ht, int * tot);
static int node_equal (wordnode_T * n1, wordnode_T * n2);
static int deref_wordnode (spellinfo_T * spin, wordnode_T * node);
static void free_wordnode (spellinfo_T * spin, wordnode_T * n);
static void add_fromto (spellinfo_T * spin, garray_T * gap, char_u * from, char_u * to);
static int sal_to_bool (char_u * s);
static int set_spell_chartab (char_u * fol, char_u * low, char_u * upp);
static void aff_check_number (int spinval, int affval, char * name);
static void process_compflags (spellinfo_T * spin, afffile_T * aff, char_u * compflags);
static void aff_check_string (char_u * spinval, char_u * affval, char * name);
static int spell_read_dic (spellinfo_T * spin, char_u * fname, afffile_T * affile);
static int get_affix_flags (afffile_T * affile, char_u * afflist);
static int flag_in_afflist (int flagtype, char_u * afflist, unsigned flag);
static int get_pfxlist (afffile_T * affile, char_u * afflist, char_u * store_afflist);
static void get_compflags (afffile_T * affile, char_u * afflist, char_u * store_afflist);
static int store_word (spellinfo_T * spin, char_u * word, int flags, int region, char_u * pfxlist, int need_affix);
static int store_aff_word (spellinfo_T * spin, char_u * word, char_u * afflist, afffile_T * affile, hashtab_T * ht, hashtab_T * xht, int condit, int flags, char_u * pfxlist, int pfxlen);
static int spell_read_wordfile (spellinfo_T * spin, char_u * fname);
static int write_vim_spell (spellinfo_T * spin, char_u * fname);
int put_bytes (FILE * fd, long_u nr, int len);
static int write_spell_prefcond (FILE * fd, garray_T * gap);
static int rep_compare (const void * s1, const void * s2);
int put_time (FILE * fd, time_T the_time);
static void clear_node (wordnode_T * node);
static int put_node (FILE * fd, wordnode_T * node, int idx, int regionmask, int prefixtree);
static void spell_reload_one (char_u * fname, int added_word);
static void spell_free_aff (afffile_T * aff);
static void spell_make_sugfile (spellinfo_T * spin, char_u * wfname);
static int sug_filltree (spellinfo_T * spin, slang_T * slang);
static int sug_maketable (spellinfo_T * spin);
static int sug_filltable (spellinfo_T * spin, wordnode_T * node, int startwordnr, garray_T * gap);
static int offset2bytes (int nr, char_u * buf);
static void sug_write (spellinfo_T * spin, char_u * fname);
void spell_suggest (int count);
static void nv_ver_scrollbar (cmdarg_T * cap);
static void nv_hor_scrollbar (cmdarg_T * cap);
static void nv_exmode (cmdarg_T * cap);
static void nv_colon (cmdarg_T * cap);
static void nv_ctrlg (cmdarg_T * cap);
static void nv_ctrlh (cmdarg_T * cap);
static void v_visop (cmdarg_T * cap);
static void nv_left (cmdarg_T * cap);
static void nv_bck_word (cmdarg_T * cap);
static void nv_clear (cmdarg_T * cap);
static void nv_ctrlo (cmdarg_T * cap);
static void nv_pcmark (cmdarg_T * cap);
pos_T *movechangelist (int count);
pos_T *movemark (int count);
static void nv_cursormark (cmdarg_T * cap, int flag, pos_T * pos);
static void nv_hat (cmdarg_T * cap);
static void nv_ident (cmdarg_T * cap);
static int normal_search (cmdarg_T * cap, int dir, char_u * pat, int opt);
static void nv_tagpop (cmdarg_T * cap);
static void nv_scroll (cmdarg_T * cap);
static void nv_right (cmdarg_T * cap);
static void nv_wordcmd (cmdarg_T * cap);
int end_word (long count, int bigword, int stop, int empty);
static void adjust_cursor (oparg_T * oap);
static void adjust_for_sel (cmdarg_T * cap);
static void nv_up (cmdarg_T * cap);
static void nv_down (cmdarg_T * cap);
static void nv_end (cmdarg_T * cap);
static void nv_goto (cmdarg_T * cap);
static void nv_dollar (cmdarg_T * cap);
static void nv_search (cmdarg_T * cap);
static void nv_next (cmdarg_T * cap);
static void nv_csearch (cmdarg_T * cap);
int searchc (cmdarg_T * cap, int t_cmd);
static void nv_brackets (cmdarg_T * cap);
static void nv_gotofile (cmdarg_T * cap);
char_u *grab_file_name (long  count, linenr_T *file_lnum);
pos_T *getnextmark (pos_T *startpos, int dir, int begin_line);
int diff_move_to (int dir, long count);
static void nv_percent (cmdarg_T * cap);
static void nv_brace (cmdarg_T * cap);
static void nv_mark (cmdarg_T * cap);
static void nv_findpar (cmdarg_T * cap);
void u_undoline (void);
static void nv_kundo (cmdarg_T * cap);
void u_undo (int count);
static void u_doit (int startcount);
static void u_undoredo (int undo);
static void u_undo_end (int did_undo, int absolute);
static void u_add_time (char_u * buf, size_t buflen, time_t tt);
static void invoke_edit (cmdarg_T * cap, int repl, int cmd, int startln);
static void nv_Replace (cmdarg_T * cap);
static void nv_subst (cmdarg_T * cap);
static void nv_optrans (cmdarg_T * cap);
static void nv_abbrev (cmdarg_T * cap);
static void nv_gomark (cmdarg_T * cap);
static void nv_regname (cmdarg_T * cap);
static void nv_visual (cmdarg_T * cap);
static void nv_window (cmdarg_T * cap);
void do_window (int nchar, long Prenum, int xchar);
static void cmd_with_count (char * cmd, char_u * bufp, size_t bufsize, long Prenum);
static void win_goto_ver (int up, long count);
static void win_goto_hor (int left, long count);
static void win_exchange (long Prenum);
static void win_rotate (int upwards, int count);
static void win_totop (int size, int flags);
void do_nv_ident (int c1, int c2);
static void nv_suspend (cmdarg_T * cap);
static void nv_g_cmd (cmdarg_T * cap);
static void nv_vreplace (cmdarg_T * cap);
static void nv_replace (cmdarg_T * cap);
void set_last_insert (int c);
int current_search (long count, int forward);
static int is_one_char (char_u * pattern, int move, pos_T * cur, int direction);
static int nv_screengo (oparg_T * oap, int dir, long dist);
static void nv_join (cmdarg_T * cap);
int bckend_word (long count, int bigword, int eol);
static void nv_edit (cmdarg_T * cap);
void term_enter_job_mode ();
static void nv_object (cmdarg_T * cap);
int current_word (oparg_T * oap, long count, int include, int bigword);
static void back_in_line (void);
int current_block (oparg_T * oap, long count, int include, int what, int other);
int current_tagblock (oparg_T * oap, long count_arg, int include);
static int in_html_tag (int end_tag);
int current_par (oparg_T * oap, long count, int include, int type);
int current_sent (oparg_T * oap, long count, int include);
static void find_first_blank (pos_T * posp);
static void findsent_forward (long count, int at_start_sent);
int current_quote (oparg_T * oap, long count, int include, int quotechar);
static int find_next_quote (char_u * line, int col, int quotechar, char_u * escape);
static int find_prev_quote (char_u * line, int col_start, int quotechar, char_u * escape);
void adjust_cursor_col (void);
void do_ascii (exarg_T * eap);
void show_sb_text (void);
static void nv_gd (oparg_T * oap, int nchar, int thisblock);
static void nv_put (cmdarg_T * cap);
void nv_diffgetput (int put, long count);
void ex_diffgetput (exarg_T * eap);
static void diff_fold_update (diff_T * dp, int skip_idx);
void *get_register (int name, int copy);
void put_register (int name, void * reg);
void undo_time (long step, int sec, int file, int absolute);
static void nv_dot (cmdarg_T * cap);
int start_redo (long count, int old_redo);
static void nv_redo (cmdarg_T * cap);
void u_redo (int count);
static void nv_Undo (cmdarg_T * cap);
static void nv_tilde (cmdarg_T * cap);
static void n_swapchar (cmdarg_T * cap);
static void nv_home (cmdarg_T * cap);
static void nv_pipe (cmdarg_T * cap);
static void nv_beginline (cmdarg_T * cap);
static void nv_select (cmdarg_T * cap);
static void nv_normal (cmdarg_T * cap);
static void nv_esc (cmdarg_T * cap);
static void nv_record (cmdarg_T * cap);
int do_record (int c);
char_u *get_recorded (void);
static int stuff_yank (int regname, char_u * p);
static void nv_at (cmdarg_T * cap);
int do_execreg (int regname, int colon, int addcr, int silent);
static int put_in_typebuf (char_u * s, int esc, int colon, int silent);
static void put_reedit_in_typebuf (int silent);
static void nv_halfpage (cmdarg_T * cap);
void halfpage (int flag, linenr_T Prenum);
static void nv_open (cmdarg_T * cap);
static void v_swap_corners (int cmdchar);
static void n_opencmd (cmdarg_T * cap);
static void nv_nbcmd (cmdarg_T * cap);
static void nv_cursorhold (cmdarg_T * cap);
void farsi_f8 (cmdarg_T * cap);
void farsi_f9 (cmdarg_T * cap);
static void conv_to_pvim (void);
static int canF_Ljoin (int c);
static int canF_Rjoin (int c);
static int toF_leading (int c);
static int toF_Rjoin (int c);
static int F_isterm (int c);
static int toF_ending (int c);
static void conv_to_pstd (void);
void crypt_blowfish_encode (cryptstate_T * state, char_u * from, size_t len, char_u * to);
void crypt_blowfish_decode (cryptstate_T * state, char_u * from, size_t len, char_u * to);
void crypt_blowfish_init (cryptstate_T * state, char_u * key, char_u * salt, int salt_len, char_u * seed, int seed_len);
int blowfish_self_test (void);
static int bf_self_test (void);
static int bf_check_tables (UINT32_T pax [18], UINT32_T sbx [4] [256], UINT32_T val);
static void bf_key_init (bf_state_T * bfs, char_u * password, char_u * salt, int salt_len);
char_u *sha256_key (char_u *buf, char_u *salt, int salt_len);
static void bf_e_block (bf_state_T * bfs, UINT32_T * p_xl, UINT32_T * p_xr);
static void bf_e_cblock (bf_state_T * bfs, char_u * block);
static void bf_cfb_init (bf_state_T * bfs, char_u * seed, int seed_len);
void crypt_zip_init (cryptstate_T * state, char_u * key, char_u * salt, int salt_len, char_u * seed, int seed_len);
static void make_crc_tab (void);
void crypt_zip_encode (cryptstate_T * state, char_u * from, size_t len, char_u * to);
void crypt_zip_decode (cryptstate_T * state, char_u * from, size_t len, char_u * to);
static void gui_athena_popdown_submenus_action (Widget w, XEvent * event, String * args, Cardinal * nargs);
static Widget submenu_widget (Widget widget);
static void gui_athena_delayed_arm_action (Widget w, XEvent * event, String * args, Cardinal * nargs);
static void gui_athena_menu_timeout (XtPointer client_data, XtIntervalId * id);
static Widget get_popup_entry (Widget w);
static void HandleThumb (Widget w, XEvent * event, String * params, Cardinal * num_params);
static void ExtractPosition (XEvent * event, Position * x, Position * y, unsigned int * state);
static void ScrollOneLineUp (Widget w, XEvent * event, String * params, Cardinal * num_params);
static void ScrollSome (Widget w, XEvent * event, int call_data);
static Boolean LookAhead (Widget w, XEvent * event);
static Bool PeekNotifyEvent (Display * dpy, XEvent * event, char * args);
static Boolean CompareEvents (XEvent * oldEvent, XEvent * newEvent);
static void ScrollOneLineDown (Widget w, XEvent * event, String * params, Cardinal * num_params);
static void ScrollPageDown (Widget w, XEvent * event, String * params, Cardinal * num_params);
static void ScrollPageUp (Widget w, XEvent * event, String * params, Cardinal * num_params);
static void NotifyScroll (Widget w, XEvent * event, String * params, Cardinal * num_params);
static void RepeatNotify (XtPointer client_data, XtIntervalId * idp);
static void EndScroll (Widget w, XEvent * event, String * params, Cardinal * num_params);
static void MoveThumb (Widget w, XEvent * event, String * params, Cardinal * num_params);
static float FractionLoc (ScrollbarWidget sbw, int x, int y);
static float FloatInRange (float num, float small, float big);
static void NotifyThumb (Widget w, XEvent * event, String * params, Cardinal * num_params);
static void ClassInitialize (void);
static void Destroy (Widget w);
static void free_pixmaps (XmEnhancedButtonWidget eb);
static void Initialize (Widget request, Widget new, ArgList args, Cardinal * num_args);
static void set_pixmap (XmEnhancedButtonWidget eb);
void motif_get_toolbar_colors (Pixel * bgp, Pixel * fgp, Pixel * bsp, Pixel * tsp, Pixel * hsp);
static int alloc_color (Display * display, Colormap colormap, char * colorname, XColor * xcolor, void * closure);
static unsigned  short  bump_color (unsigned short value);
static void set_size (XmEnhancedButtonWidget newtb);
static void Realize (Widget w, Mask * valueMask, XSetWindowAttributes * attributes);
static Boolean SetValues (Widget current, Widget request, Widget desired, ArgList args, Cardinal * num_args);
static void CreateGC (Widget w);
static void Resize (Widget w);
static void SetDimensions (ScrollbarWidget sbw);
static void Redisplay (Widget w, XEvent * event, Region region);
static void _Xaw3dDrawShadows (Widget gw, XEvent * event, Region region, int out);
static void PaintArrows (ScrollbarWidget sbw);
static void draw_label (XmEnhancedButtonWidget eb, XEvent * event, Region region);
static void draw_pixmap (XmEnhancedButtonWidget eb, XEvent * event, Region region);
static void draw_shadows (XmEnhancedButtonWidget eb);
static int gui_ph_handle_timer_cursor (PtWidget_t * widget, void * data, PtCallbackInfo_t * info);
static int gui_ph_handle_timer_timeout (PtWidget_t * widget, void * data, PtCallbackInfo_t * info);
static int gui_ph_handle_window_cb (PtWidget_t * widget, void * data, PtCallbackInfo_t * info);
void gui_mch_mousehide (int hide);
void gui_mch_start_blink (void);
void gui_mch_stop_blink (int may_call_gui_update_cursor);
static int gui_ph_handle_scrollbar (PtWidget_t * widget, void * data, PtCallbackInfo_t * info);
static void scroll (VTermState * state, VTermRect rect, int downward, int rightward);
static int gui_ph_handle_keyboard (PtWidget_t * widget, void * data, PtCallbackInfo_t * info);
static int gui_ph_handle_mouse (PtWidget_t * widget, void * data, PtCallbackInfo_t * info);
static int gui_ph_handle_pulldown_menu (PtWidget_t * widget, void * data, PtCallbackInfo_t * info);
static int gui_ph_handle_menu (PtWidget_t * widget, void * data, PtCallbackInfo_t * info);
static int gui_ph_handle_focus (PtWidget_t * widget, void * data, PtCallbackInfo_t * info);
static int gui_ph_handle_menu_resize (PtWidget_t * widget, void * other, PtCallbackInfo_t * info);
static void gui_ph_resize_container (void);
static int gui_ph_handle_menu_unrealized (PtWidget_t *widget, void *data, PtCallbackInfo_t *info);
